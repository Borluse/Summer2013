using UnityEditor;
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

[CustomEditor(typeof(WavePrefabPool))]
public class WavePrefabPoolInspector : Editor {
	private Transform poolTrans;
	
	private void FindMatchingSpawners(Transform poolTrans, bool selectThem) {
		LevelSettings levSettings = (LevelSettings) GameObject.FindObjectOfType(typeof(LevelSettings));
		
		var spawners = levSettings.GetAllSpawners();
		Debug.Log(spawners.Count + " spawners");
		WaveSyncroPrefabSpawner spawnerScript = null;
		
		var matchSpawners = new List<GameObject>();
		
		StringBuilder sb = new StringBuilder();
		
		foreach (var spawner in spawners) {
			spawnerScript = spawner.GetComponent<WaveSyncroPrefabSpawner>();
			if (!spawnerScript.IsUsingPrefabPool(poolTrans)) {
				continue;
			}
			
			matchSpawners.Add(spawner.gameObject);
			if (sb.Length > 0) {
				sb.Append(", ");
			}
			sb.Append("'" + spawnerScript.name + "'");
		}
		
		if (sb.Length == 0) {
			sb.Append("~None~");
		}
		
		Debug.Log(string.Format("--- Found {0} matching spawner(s) for Prefab Pool: ({1}) ---",
			matchSpawners.Count,
			sb.ToString()));
		if (selectThem) {
			if (matchSpawners.Count > 0) {
				Selection.objects = matchSpawners.ToArray();
			} else {
				Debug.Log("No spawners use this Prefab Pool.");
			}
		}
	}
	
	public override void OnInspectorGUI() {
        EditorGUIUtility.LookLikeControls();
		
		WavePrefabPool settings = (WavePrefabPool)target;
		this.poolTrans = settings.transform;
			
		if (settings.logoTexture != null) {
			DTInspectorUtility.DrawTexture(settings.logoTexture);
		}

		EditorGUI.indentLevel = 0;
		settings.exhaustiveList = EditorGUILayout.Toggle("Exhaust before repeat", settings.exhaustiveList);
		EditorGUILayout.Separator();
		
		EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(50));
		EditorGUILayout.LabelField("Spawners Using");
		if (GUILayout.Button("List", GUILayout.MinWidth(55))) {
			FindMatchingSpawners(poolTrans, false);
		}
		if (GUILayout.Button("Select", GUILayout.MinWidth(55))) {
			FindMatchingSpawners(poolTrans, true);
		}
		EditorGUILayout.EndHorizontal();

		EditorGUILayout.Separator();
		
		EditorGUI.indentLevel = -1;
		EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
		settings.isExpanded = DTInspectorUtility.Foldout(settings.isExpanded, string.Format("Prefab Pool Items ({0})", settings.poolItems.Count));
        // BUTTONS...
        EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
		
        // Add expand/collapse buttons if there are items in the list
        if (settings.poolItems.Count > 0) {
            GUIContent content;
            var collapseIcon = '\u2261'.ToString();
            content = new GUIContent(collapseIcon, "Click to collapse all");
            var masterCollapse = GUILayout.Button(content, EditorStyles.toolbarButton);

            var expandIcon = '\u25A1'.ToString();
            content = new GUIContent(expandIcon, "Click to expand all");
            var masterExpand = GUILayout.Button(content, EditorStyles.toolbarButton);
			if (masterExpand) {
				ExpandCollapseAll(settings, true);
			} 
			if (masterCollapse) {
				ExpandCollapseAll(settings, false);
			}
        } else {
         	GUILayout.FlexibleSpace();
        }
		
        EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(50));
        // A little space between button groups
        GUILayout.Space(6);
		
		var topAdded = false;

		var addText = string.Format("Click to add Pool item{0}.", settings.poolItems.Count > 0 ? " before the first" : "");
		
        // Main Add button
		if (GUILayout.Button(new GUIContent("+", addText), EditorStyles.toolbarButton)) {
			topAdded = true;
		}
		
		EditorGUILayout.EndHorizontal();
		EditorGUILayout.EndHorizontal();
		EditorGUILayout.EndHorizontal();

		DTInspectorUtility.FunctionButtons poolItemButton = DTInspectorUtility.FunctionButtons.None;
		
		int? itemToDelete = null;
		int? itemToInsert = null;
		int? itemToShiftUp = null;
		int? itemToShiftDown = null;
		
		if (settings.isExpanded) {
			for (var i = 0; i < settings.poolItems.Count; i++) {
				var item = settings.poolItems[i];
	
	            EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
				EditorGUI.indentLevel = 0;
				
				var sName = "";
				if (!item.isExpanded) {
					sName = " (" + item.prefabToSpawn.name + ")";
				}
				
				string sDisabled = "";
				if (!item.isExpanded && !item.active) {
					sDisabled = " - DISABLED";
				}
				
	            item.isExpanded = DTInspectorUtility.Foldout(item.isExpanded, 
					string.Format("Pool Item #{0}{1}{2}", (i + 1), sName, sDisabled));

	            poolItemButton = DTInspectorUtility.AddFoldOutListItemButtons(i, settings.poolItems.Count, "Pool Item", true);

				switch (poolItemButton) {
					case DTInspectorUtility.FunctionButtons.Remove:
						itemToDelete = i;
						break;
					case DTInspectorUtility.FunctionButtons.Add:
						itemToInsert = i;
						break;
					case DTInspectorUtility.FunctionButtons.ShiftUp:
						itemToShiftUp = i;
						break;
					case DTInspectorUtility.FunctionButtons.ShiftDown:
						itemToShiftDown = i;
						break;
				}
				
				EditorGUILayout.EndHorizontal();
				
				if (item.isExpanded) {
					EditorGUI.indentLevel = 2;
					
					item.active = EditorGUILayout.BeginToggleGroup("Active", item.active);
					item.prefabToSpawn = (Transform) EditorGUILayout.ObjectField("Prefab", item.prefabToSpawn ,typeof(Transform), true);
					item.weight = EditorGUILayout.IntSlider("Weight", item.weight, 1, 100);
					EditorGUILayout.EndToggleGroup();
				}
			}
		}
		
		if (topAdded) {
			var newItem = new WavePrefabPoolItem();
			var index = 0;
			if (settings.poolItems.Count > 0) {
				index = settings.poolItems.Count - 1;
			}
			settings.poolItems.Insert(index, newItem);
		} else if (itemToDelete.HasValue) {
			if (settings.poolItems.Count == 1) {
				EditorUtility.DisplayDialog(DTInspectorUtility.ALERT_TITLE, "You cannot delete the only Prefab Pool item. Delete the entire Pool from the hierarchy if you wish.",
					DTInspectorUtility.ALERT_OK_TEXT);

			} else {
				settings.poolItems.RemoveAt(itemToDelete.Value);
			}
		} else if (itemToInsert.HasValue) {
			var newItem = new WavePrefabPoolItem();
			settings.poolItems.Insert(itemToInsert.Value + 1, newItem);
		} 
		
		if (itemToShiftUp.HasValue) {
			var item = settings.poolItems[itemToShiftUp.Value];
			settings.poolItems.Insert(itemToShiftUp.Value - 1, item);
			settings.poolItems.RemoveAt(itemToShiftUp.Value + 1);
		}
		
		if (itemToShiftDown.HasValue) {
			var index = itemToShiftDown.Value + 1;
			var item = settings.poolItems[index];
			settings.poolItems.Insert(index - 1, item);
			settings.poolItems.RemoveAt(index + 1);
		}
		
		if (GUI.changed || topAdded || poolItemButton != DTInspectorUtility.FunctionButtons.None) {
  			EditorUtility.SetDirty(target);	// or it won't save the data!!
		}
		
		//DrawDefaultInspector();
    }
	
	private void ExpandCollapseAll(WavePrefabPool pool, bool isExpand) {
		foreach (var poolItem in pool.poolItems) {
			poolItem.isExpanded = isExpand;
		}
	}
}
