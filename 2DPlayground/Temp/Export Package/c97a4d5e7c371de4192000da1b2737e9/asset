using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;
using System.Text;

[CustomEditor(typeof(LevelSettings))]
public class LevelSettingsInspector : Editor {
	public override void OnInspectorGUI() {
        EditorGUIUtility.LookLikeControls();
		EditorGUI.indentLevel = 1;
		
		LevelSettings settings = (LevelSettings)target;
		
		if (settings.logoTexture != null) {
			DTInspectorUtility.DrawTexture(settings.logoTexture);
		}
		
		settings.disableSyncroSpawners = EditorGUILayout.Toggle("Syncro Spawners Off", settings.disableSyncroSpawners);
		settings.isLoggingOn = EditorGUILayout.Toggle("Log Messages", settings.isLoggingOn);
		
		
		EditorGUILayout.Separator();
		
		settings.gameOverMusicSettings.WaveMusicMode = (LevelSettings.WaveMusicMode) EditorGUILayout.EnumPopup("G.O. Music Mode", settings.gameOverMusicSettings.WaveMusicMode);
		if (settings.gameOverMusicSettings.WaveMusicMode == LevelSettings.WaveMusicMode.PlayNew) {
			settings.gameOverMusicSettings.WaveMusic = (AudioClip) EditorGUILayout.ObjectField("G.O. Music", settings.gameOverMusicSettings.WaveMusic, typeof(AudioClip), true);
		}
		if (settings.gameOverMusicSettings.WaveMusicMode != LevelSettings.WaveMusicMode.Silence) {
			settings.gameOverMusicSettings.WaveMusicVolume = EditorGUILayout.Slider("G.O. Music Volume", settings.gameOverMusicSettings.WaveMusicVolume, 0f, 1f);
		} else {
			settings.gameOverMusicSettings.FadeTime = EditorGUILayout.Slider("Silence Fade Time", settings.gameOverMusicSettings.FadeTime, 0f, 15f);
		}
		
		EditorGUILayout.Separator();

		// create spawners section
        EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
		EditorGUI.indentLevel = -1;
		settings.createSpawnersExpanded = DTInspectorUtility.Foldout(settings.createSpawnersExpanded, "Spawner Creation");
		
		if (settings.createSpawnersExpanded) {
	        // BUTTONS...
	        EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
			EditorGUI.indentLevel = 1;
	
	        // Add expand/collapse buttons if there are items in the list
	
	        EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
	        // A little space between button groups
	        GUILayout.Space(6);
			
			EditorGUILayout.EndHorizontal();
	        EditorGUILayout.EndHorizontal();
	        EditorGUILayout.EndHorizontal();
			// end create spawners section
			
			EditorGUILayout.Separator();
	
			settings.newSpawnerName = EditorGUILayout.TextField("New Spawner Name", settings.newSpawnerName);
			settings.newSpawnerType = (LevelSettings.SpawnerType) EditorGUILayout.EnumPopup("Spawner Color", settings.newSpawnerType);
	        
			//Debug.Log(settings.newSpawnerType);
			
			EditorGUILayout.BeginHorizontal(EditorStyles.boldLabel);
			EditorGUILayout.LabelField("", EditorStyles.miniLabel);
			if (GUILayout.Button("Create Spawner", EditorStyles.miniButton, GUILayout.MaxWidth(110))) {
				CreateSpawner(settings);		
			}
			GUILayout.FlexibleSpace();
		}

		EditorGUILayout.EndHorizontal();
		
		// create Prefab Pools section
        EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
		EditorGUI.indentLevel = -1;
		settings.createPrefabPoolsExpanded = DTInspectorUtility.Foldout(settings.createPrefabPoolsExpanded, "Prefab Pool Creation");
		
		if (settings.createPrefabPoolsExpanded) {
	        // BUTTONS...
	        EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
			EditorGUI.indentLevel = 1;
	
	        // Add expand/collapse buttons if there are items in the list
	
	        EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
	        // A little space between button groups
	        GUILayout.Space(6);
			
			EditorGUILayout.EndHorizontal();
	        EditorGUILayout.EndHorizontal();
	        EditorGUILayout.EndHorizontal();
			
			EditorGUILayout.Separator();
			settings.newPrefabPoolName = EditorGUILayout.TextField("New Pool Name", settings.newPrefabPoolName);
	        
			//Debug.Log(settings.newSpawnerType);
			
			EditorGUILayout.BeginHorizontal(EditorStyles.boldLabel);
			EditorGUILayout.LabelField("", EditorStyles.miniLabel);
			if (GUILayout.Button("Create Prefab Pool", EditorStyles.miniButton, GUILayout.MaxWidth(110))) {
				CreatePrefabPool(settings);		
			}
			GUILayout.FlexibleSpace();
		}
		EditorGUILayout.EndHorizontal();
		// end create prefab pools section
		
		
		
        EditorGUILayout.BeginHorizontal();
        EditorGUI.indentLevel = -1;  // Space will handle this for the header

        EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
        settings.levelsAreExpanded = DTInspectorUtility.Foldout(settings.levelsAreExpanded, "Level Wave Settings");

        // BUTTONS...
        EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));

        // Add expand/collapse buttons if there are items in the list
		if (settings.LevelTimes.Count > 0) {
            GUIContent content;
            var collapseIcon = '\u2261'.ToString();
            content = new GUIContent(collapseIcon, "Click to collapse all");
            var masterCollapse = GUILayout.Button(content, EditorStyles.toolbarButton);

            var expandIcon = '\u25A1'.ToString();
            content = new GUIContent(expandIcon, "Click to expand all");
            var masterExpand = GUILayout.Button(content, EditorStyles.toolbarButton);
			if (masterExpand) {
				ExpandCollapseAll(settings, true);
			} 
			if (masterCollapse) {
				ExpandCollapseAll(settings, false);
			}
        } else {
         	GUILayout.FlexibleSpace();
        }

        EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(50));
        // A little space between button groups
        GUILayout.Space(6);
		
		var topAdded = false;
		
		var addText = string.Format("Click to add level{0}.", settings.LevelTimes.Count > 0 ? " before the first" : "");
		
        // Main Add button
        if (GUILayout.Button(new GUIContent("+", addText), EditorStyles.toolbarButton)) {
			topAdded = true;
			CreateNewLevelAfter(settings);
		}

		EditorGUILayout.EndHorizontal();

        EditorGUILayout.EndHorizontal();
        EditorGUILayout.EndHorizontal();
        EditorGUILayout.EndHorizontal();

		DTInspectorUtility.FunctionButtons levelButtonPressed = DTInspectorUtility.FunctionButtons.None;
		DTInspectorUtility.FunctionButtons waveButtonPressed = DTInspectorUtility.FunctionButtons.None;
		
		if (settings.levelsAreExpanded) { 
			EditorGUI.indentLevel = 0;
			
			int levelToDelete = -1;
			int levelToInsertAt = -1;
			int waveToInsertAt = -1;
			int waveToDelete = -1;
			
			LevelSpecifics levelSetting = null;
			for (var l = 0; l < settings.LevelTimes.Count; l++) {
				EditorGUI.indentLevel = 0;
				levelSetting = settings.LevelTimes[l];

	            EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
	            // Display foldout with current state
	            levelSetting.isExpanded = DTInspectorUtility.Foldout(levelSetting.isExpanded, 
					string.Format("Level {0} waves", (l + 1)));
	            //foldOutStates[item] = foldOutState;  // Used again below
	            levelButtonPressed = DTInspectorUtility.AddFoldOutListItemButtons(l, settings.LevelTimes.Count, "level");
	            EditorGUILayout.EndHorizontal();
				
				if (levelSetting.isExpanded) {
					for (var w = 0; w < levelSetting.WaveSettings.Count; w++) {
						var waveSetting = levelSetting.WaveSettings[w];

						EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
						EditorGUI.indentLevel = 1;
			            // Display foldout with current state
			            waveSetting.isExpanded = DTInspectorUtility.Foldout(waveSetting.isExpanded, "Wave " + (w + 1));
			            waveButtonPressed = DTInspectorUtility.AddFoldOutListItemButtons(w, levelSetting.WaveSettings.Count, "wave");
			            EditorGUILayout.EndHorizontal();
						
						EditorGUI.indentLevel = 3;
						if (waveSetting.isExpanded) {
							waveSetting.waveType = (LevelSettings.WaveType) EditorGUILayout.EnumPopup("Wave Type", waveSetting.waveType);
							
							if (waveSetting.waveType == LevelSettings.WaveType.Timed) {
								waveSetting.WaveDuration = EditorGUILayout.IntSlider("Duration (sec)", waveSetting.WaveDuration, 1, 200);
							}
							if (l > 0 || w > 0) {
								waveSetting.musicSettings.WaveMusicMode = (LevelSettings.WaveMusicMode) EditorGUILayout.EnumPopup("Music Mode", waveSetting.musicSettings.WaveMusicMode);
							}
							
							if (waveSetting.musicSettings.WaveMusicMode == LevelSettings.WaveMusicMode.PlayNew) {
								waveSetting.musicSettings.WaveMusic = (AudioClip) EditorGUILayout.ObjectField( "Music", waveSetting.musicSettings.WaveMusic, typeof(AudioClip), true);
							}
							if (waveSetting.musicSettings.WaveMusicMode != LevelSettings.WaveMusicMode.Silence) {
								waveSetting.musicSettings.WaveMusicVolume = EditorGUILayout.Slider("Music Volume", waveSetting.musicSettings.WaveMusicVolume, 0f, 1f);
							} else {
								waveSetting.musicSettings.FadeTime = EditorGUILayout.Slider("Silence Fade Time", waveSetting.musicSettings.FadeTime, 0f, 15f);
							}
							
							EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(50));
							EditorGUILayout.LabelField("Spawners Used");
							if (GUILayout.Button("List", GUILayout.MinWidth(55))) {
								FindMatchingSpawners(settings, l, w, false);
							}
							if (GUILayout.Button("Select", GUILayout.MinWidth(55))) {
								FindMatchingSpawners(settings, l, w, true);
							}
							EditorGUILayout.EndHorizontal();
						}
						
						switch (waveButtonPressed) {
							case DTInspectorUtility.FunctionButtons.Remove:
								if (levelSetting.WaveSettings.Count <= 1) {
									Debug.LogError("You cannot delete the only Wave in a Level. Delete the Level if you like.");
								} else {
									waveToDelete = w;
								}	
								break;
							case DTInspectorUtility.FunctionButtons.Add:
								waveToInsertAt = w;
								break;
						}
					}
					
					if (waveToDelete >= 0) {
						DeleteWave(settings, levelSetting, waveToDelete, l);
					}
					if (waveToInsertAt > -1) {
						InsertWaveAfter(settings, levelSetting, waveToInsertAt, l);
					}
				} 
				
				switch (levelButtonPressed) {
					case DTInspectorUtility.FunctionButtons.Remove:
						levelToDelete = l;
						break;
					case DTInspectorUtility.FunctionButtons.Add:
						levelToInsertAt = l;
						break;
				}
			}
			
			if (levelToDelete > -1) {
				DeleteLevel(settings, levelToDelete);
			}
			
			if (levelToInsertAt > -1) {
				CreateNewLevelAfter(settings, levelToInsertAt); 
			}
		}

		if (GUI.changed || topAdded || levelButtonPressed != DTInspectorUtility.FunctionButtons.None || waveButtonPressed != DTInspectorUtility.FunctionButtons.None) {
  			EditorUtility.SetDirty(target);	// or it won't save the data!!
		}
		
		//DrawDefaultInspector();
    }

	private void ExpandCollapseAll(LevelSettings levelSettings, bool isExpand) {
		foreach (var level in levelSettings.LevelTimes) {
			level.isExpanded = isExpand;
			foreach (var wave in level.WaveSettings) {
				wave.isExpanded = isExpand;
			}
		}
	}
	
	private void CreateSpawner(LevelSettings settings) {
		string name = settings.newSpawnerName;
		
		if (string.IsNullOrEmpty(name)) {
			EditorUtility.DisplayDialog(DTInspectorUtility.ALERT_TITLE, "You must enter a name for your new Spawner.",
				DTInspectorUtility.ALERT_OK_TEXT);
			return;
		}
		
		Transform spawnerTrans = null;
		
		switch (settings.newSpawnerType) {
			case LevelSettings.SpawnerType.Green:
				spawnerTrans = settings.GreenSpawnerTrans;
				break;
			case LevelSettings.SpawnerType.Red:
				spawnerTrans = settings.RedSpawnerTrans;
				break;
		}
		
		var spawnPos = settings.transform.position;
		spawnPos.x += Random.Range(-10, 10);
		spawnPos.z += Random.Range(-10, 10);
		
		var newSpawner = GameObject.Instantiate(spawnerTrans.gameObject, spawnPos, Quaternion.identity) as GameObject;
		newSpawner.name = name;
		
		var spawnersHolder = settings.transform.FindChild(LevelSettings.SPAWNER_CONTAINER_TRANS_NAME);
		if (spawnersHolder == null) {
			EditorUtility.DisplayDialog(DTInspectorUtility.ALERT_TITLE, LevelSettings.NO_SPAWN_CONTAINER_ALERT,
				DTInspectorUtility.ALERT_OK_TEXT);
			
			GameObject.DestroyImmediate(newSpawner);
			
			return;
		}
		
		newSpawner.transform.parent = spawnersHolder.transform;
	}
	
	private void CreatePrefabPool(LevelSettings settings) {
		string name = settings.newPrefabPoolName;
		
		if (string.IsNullOrEmpty(name)) {
			EditorUtility.DisplayDialog(DTInspectorUtility.ALERT_TITLE, "You must enter a name for your new Prefab Pool.",
				DTInspectorUtility.ALERT_OK_TEXT);
			return;
		}
		
		var spawnPos = settings.transform.position;
		
		var newPool = GameObject.Instantiate(settings.PrefabPoolTrans.gameObject, spawnPos, Quaternion.identity) as GameObject;
		newPool.name = name;
		
		var poolsHolder = settings.transform.FindChild(LevelSettings.PREFAB_POOLS_CONTAINER_TRANS_NAME);
		if (poolsHolder == null) {
			EditorUtility.DisplayDialog(DTInspectorUtility.ALERT_TITLE, LevelSettings.NO_PREFAB_POOLS_CONTAINER_ALERT,
				DTInspectorUtility.ALERT_OK_TEXT);
			
			GameObject.DestroyImmediate(newPool);
			return;
		}
		
		var dupe = poolsHolder.FindChild(name);
		if (dupe != null) {
			EditorUtility.DisplayDialog(DTInspectorUtility.ALERT_TITLE, "You already have a Prefab Pool named '" + name + "', please choose another name.",
				DTInspectorUtility.ALERT_OK_TEXT);
			
			GameObject.DestroyImmediate(newPool);
			return;
		}
		
		newPool.transform.parent = poolsHolder.transform;
	}
	
	private void InsertWaveAfter(LevelSettings levSettings, LevelSpecifics settings, int waveToInsertAt, int level) {
		var spawners = levSettings.GetAllSpawners();
			
		var newWave = new LevelWave();

		waveToInsertAt++;
		settings.WaveSettings.Insert(waveToInsertAt, newWave);

		WaveSyncroPrefabSpawner spawnerScript = null;
	
		foreach (var spawner in spawners) {
			spawnerScript = spawner.GetComponent<WaveSyncroPrefabSpawner>();
			spawnerScript.InsertWave(waveToInsertAt, level);
		}		
	}
	
	private void DeleteLevel(LevelSettings settings, int levelToDelete) {
		List<Transform> spawners = settings.GetAllSpawners();
		
		settings.LevelTimes.RemoveAt(levelToDelete);
		
		WaveSyncroPrefabSpawner spawnerScript = null;
	
		foreach (var spawner in spawners) {
			spawnerScript = spawner.GetComponent<WaveSyncroPrefabSpawner>();
			spawnerScript.DeleteLevel(levelToDelete);
		}		
	}
	
	private void CreateNewLevelAfter(LevelSettings settings, int? index = null) {
		List<Transform> spawners = settings.GetAllSpawners();
		
		var newLevel = new LevelSpecifics();
		var newWave = new LevelWave();
		newLevel.WaveSettings.Add(newWave);
		
		int newLevelIndex = 0;
		
		if (index == null) {
			newLevelIndex = settings.LevelTimes.Count;
		} else {
			newLevelIndex = index.Value + 1;
		}
		
		settings.LevelTimes.Insert(newLevelIndex, newLevel);
		
		WaveSyncroPrefabSpawner spawnerScript = null;
	
		foreach (var spawner in spawners) {
			spawnerScript = spawner.GetComponent<WaveSyncroPrefabSpawner>();
			spawnerScript.InsertLevel(newLevelIndex);
		}		
	}

	private void DeleteWave(LevelSettings levSettings, LevelSpecifics settings, int waveToDelete, int levelNumber) {
		var spawners = levSettings.GetAllSpawners();
		
		settings.WaveSettings.RemoveAt(waveToDelete);

		WaveSyncroPrefabSpawner spawnerScript = null;
		
		foreach (var spawner in spawners) {
			spawnerScript = spawner.GetComponent<WaveSyncroPrefabSpawner>();
			spawnerScript.DeleteWave(levelNumber, waveToDelete);
		}
	}
	
	private void FindMatchingSpawners(LevelSettings levSettings, int level, int wave, bool selectThem) {
		var spawners = levSettings.GetAllSpawners();
		WaveSyncroPrefabSpawner spawnerScript = null;
		
		var matchSpawners = new List<GameObject>();
		
		StringBuilder sb = new StringBuilder();
		
		foreach (var spawner in spawners) {
			spawnerScript = spawner.GetComponent<WaveSyncroPrefabSpawner>();
			var matchingWave = spawnerScript.FindWave(level, wave);
			if (matchingWave == null) {
				continue;
			}
			
			matchSpawners.Add(spawner.gameObject);
			if (sb.Length > 0) {
				sb.Append(", ");
			}
			sb.Append("'" + spawnerScript.name + "'");
		}
		
		if (sb.Length == 0) {
			sb.Append("~None~");
		}
		
		Debug.Log(string.Format("--- Found {0} matching spawner(s) for level# {1}, wave# {2}: ({3}) ---",
			matchSpawners.Count,
			level + 1, 
			wave + 1,
			sb.ToString()));
		if (selectThem) {
			if (matchSpawners.Count > 0) {
				Selection.objects = matchSpawners.ToArray();
			} else {
				Debug.Log("No spawners use this wave.");
			}
		}
	}
}
