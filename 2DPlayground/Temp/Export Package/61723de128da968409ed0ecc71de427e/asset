using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

public class WavePrefabPool : MonoBehaviour {
	public Texture logoTexture;
	public bool isExpanded = true;
	public bool exhaustiveList = true;
	
	private bool isValid = false;
	public List<WavePrefabPoolItem> poolItems;
	private List<int> poolItemIndexes = new List<int>();
	private List<int> poolItemsCopy = new List<int>();
	
	void Start() {
		// fill weighted pool
		for (var item = 0; item < poolItems.Count; item++) {
			var poolItem = poolItems[item];
	
			if (!poolItem.active) {
				continue;
			}
			
			if (poolItem.prefabToSpawn == null) {
				Debug.LogError(string.Format("Pool Item #{0} in PrefabPool '{1}' has no prefab. Disabling Killer Waves.",
					(item + 1),
					this.name));
				LevelSettings.IsGameOver = true;
				return;
			}
			
			for (int i = 0; i < poolItem.weight; i++) {
				poolItemIndexes.Add(item);
			}
		}
		
		if (poolItemIndexes.Count == 0) {
			Debug.LogError("The Prefab Pool '" + this.name + "' has no active Prefab Pool items. Please add some or delete the Prefab pool before continuing. Disabling Killer Waves.");
			LevelSettings.IsGameOver = true;
			return;
		}
	
		CopyToDwindler();
		isValid = true;
	}
	
	private void CopyToDwindler() {
		//Debug.Log("-----refill");
		poolItemsCopy.Clear();
		poolItemsCopy.AddRange(poolItemIndexes);
	}
	
	public Transform GetRandomWeightedTransform() {
		if (!isValid) {
			return null;
		}
		
		var randIndex = UnityEngine.Random.Range(0, poolItemsCopy.Count - 1);
		
		var randPrefabIndex = poolItemsCopy[randIndex];
		
		if (exhaustiveList) {
			poolItemsCopy.RemoveAt(randIndex);
			
			if (poolItemsCopy.Count == 0) {
				// refill
				if (LevelSettings.IsLoggingOn) {
					Debug.Log(string.Format("Prefab Pool '{0}' refilling exhaustion list.", 
						this.name));
				}

				CopyToDwindler();
			}
		}

		var spawnable = poolItems[randPrefabIndex].prefabToSpawn;

		if (LevelSettings.IsLoggingOn) {
			Debug.Log(string.Format("Prefab Pool '{0}' spawning random item '{1}'.", 
				this.name,
				spawnable.name));
		}
	
		return spawnable;
	}
}
