using UnityEditor;
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

[CustomEditor(typeof(TriggeredSpawner))]
public class TriggeredSpawnerInspector : Editor {
	public override void OnInspectorGUI() {
        EditorGUIUtility.LookLikeControls();
		
		TriggeredSpawner settings = (TriggeredSpawner)target;
		
		DTInspectorUtility.DrawTexture(DTInspectorUtility.GetLevelSettings.logoTexture);
			
		EditorGUI.indentLevel = -1;
		
		List<bool> changedList = new List<bool>();
		changedList.Add(RenderTriggeredWave(settings.visibleWave, "Visible Event", TriggeredSpawner.EventType.Visible));
		changedList.Add(RenderTriggeredWave(settings.invisibleWave, "Invisible Event", TriggeredSpawner.EventType.Invisible));
		changedList.Add(RenderTriggeredWave(settings.mouseOverWave, "MouseOver Event", TriggeredSpawner.EventType.MouseOver));
		changedList.Add(RenderTriggeredWave(settings.mouseClickWave, "MouseClick Event", TriggeredSpawner.EventType.MouseClick));
		changedList.Add(RenderTriggeredWave(settings.collisionWave, "Collision Event", TriggeredSpawner.EventType.OnCollision));
		changedList.Add(RenderTriggeredWave(settings.triggerWave, "Trigger Event", TriggeredSpawner.EventType.OnTrigger));
		changedList.Add(RenderTriggeredWave(settings.spawnedWave, "OnSpawned Event", TriggeredSpawner.EventType.OnSpawned));
		changedList.Add(RenderTriggeredWave(settings.despawnedWave, "OnDespawned Event", TriggeredSpawner.EventType.OnDespawned));
		
		if (GUI.changed || changedList.Contains(true)) {
  			EditorUtility.SetDirty(target);	// or it won't save the data!!
		}
		
		//DrawDefaultInspector();
    }
	
	private bool RenderTriggeredWave(TriggeredWaveSpecifics waveSetting, string toggleText, TriggeredSpawner.EventType eventType) {
		EditorGUI.indentLevel = 2;
        EditorGUILayout.BeginHorizontal(EditorStyles.objectFieldThumb);
		waveSetting.enableWave = EditorGUILayout.Toggle(toggleText, waveSetting.enableWave);
        EditorGUILayout.EndHorizontal();
		 
		var poolNames = PoolNames;
		var isDirty = false;
		
		if (waveSetting.enableWave) {
			waveSetting.spawnSource = (WaveSpecifics.SpawnOrigin) EditorGUILayout.EnumPopup("Prefab Type", waveSetting.spawnSource);
			switch (waveSetting.spawnSource) {
				case WaveSpecifics.SpawnOrigin.Specific:
					waveSetting.prefabToSpawn = (Transform) EditorGUILayout.ObjectField("Prefab to spawn", waveSetting.prefabToSpawn, typeof(Transform), true);
					break;
				case WaveSpecifics.SpawnOrigin.PrefabPool:
					if (poolNames != null) {
						waveSetting.prefabPoolIndex = 0; // in case not found.
						if (waveSetting.prefabPoolTrans != null) {
							for (var i = 0; i < poolNames.Length; i++) {	
								if (poolNames[i] == waveSetting.prefabPoolTrans.name) {
									waveSetting.prefabPoolIndex = i; // update for when pool index changes
								}	
							}
						}
					
						if (poolNames.Length > 0) {
							waveSetting.prefabPoolIndex = EditorGUILayout.Popup("Prefab Pool", waveSetting.prefabPoolIndex, poolNames);
							waveSetting.prefabPoolTrans = DTInspectorUtility.GetFirstMatchingPrefabPool(waveSetting.prefabPoolIndex);
						} else {
							DTInspectorUtility.ShowColorWarning("You have no Prefab Pools. Create one first.");
						}
					} else {
						DTInspectorUtility.ShowColorWarning(LevelSettings.NO_PREFAB_POOLS_CONTAINER_ALERT);
						DTInspectorUtility.ShowColorWarning(LevelSettings.REVERT_LEVEL_SETTINGS_ALERT);
					}
					break;
			}

			waveSetting.NumberToSpawn = EditorGUILayout.IntSlider("Number to spawn", waveSetting.NumberToSpawn, 1, 100);
		
			if (!TriggeredSpawner.eventsWithInflexibleWaveLength.Contains(eventType)) {
				waveSetting.TimeToSpawnWholeWave = EditorGUILayout.Slider("Time to spawn all", waveSetting.TimeToSpawnWholeWave, 0f, 50);
			} 
			
			if (!TriggeredSpawner.eventsWithInflexibleWaveLength.Contains(eventType)) {
				waveSetting.WaveDelaySeconds = EditorGUILayout.Slider("Delay wave (sec)", waveSetting.WaveDelaySeconds, 0f, 50f);
			} 
			
			if (TriggeredSpawner.eventsWithTagLayerFilters.Contains(eventType)) {
				waveSetting.useLayerFilter = EditorGUILayout.BeginToggleGroup("Layer filters", waveSetting.useLayerFilter);
				if (waveSetting.useLayerFilter) {
					for (var i = 0; i < waveSetting.matchingLayers.Count; i++) {
						waveSetting.matchingLayers[i] = EditorGUILayout.LayerField("Layer Match " + (i + 1), waveSetting.matchingLayers[i]);
					}
					EditorGUILayout.BeginHorizontal();
					GUILayout.Space(24);
					if (GUILayout.Button(new GUIContent("Add", "Click to add a layer match at the end"), GUILayout.Width(60))) {
						waveSetting.matchingLayers.Add(0);
						isDirty = true;
					}
					if (waveSetting.matchingLayers.Count > 1) {
						if (GUILayout.Button(new GUIContent("Remove", "Click to remove the last layer match"), GUILayout.Width(60))) {
							waveSetting.matchingLayers.RemoveAt(waveSetting.matchingLayers.Count - 1);
							isDirty = true;
						}
					}
					EditorGUILayout.EndHorizontal();
				}
				EditorGUILayout.EndToggleGroup();
				
				waveSetting.useTagFilter = EditorGUILayout.BeginToggleGroup("Tag filter", waveSetting.useTagFilter);
				if (waveSetting.useTagFilter) {
					for (var i = 0; i < waveSetting.matchingTags.Count; i++) {
						waveSetting.matchingTags[i] = EditorGUILayout.TagField("Tag Match " + (i + 1), waveSetting.matchingTags[i]);
					}
					EditorGUILayout.BeginHorizontal();
					GUILayout.Space(24);
					if (GUILayout.Button(new GUIContent("Add", "Click to add a tag match at the end"), GUILayout.Width(60))) {
						waveSetting.matchingTags.Add("Untagged");
						isDirty = true;
					}
					if (waveSetting.matchingTags.Count > 1) {
						if (GUILayout.Button(new GUIContent("Remove", "Click to remove the last tag match"), GUILayout.Width(60))) {
							waveSetting.matchingTags.RemoveAt(waveSetting.matchingLayers.Count - 1);
							isDirty = true;
						}
					}
					EditorGUILayout.EndHorizontal();
				}
				EditorGUILayout.EndToggleGroup();
			}
			
			if (TriggeredSpawner.eventsThatCanRepeatWave.Contains(eventType)) {
				waveSetting.enableRepeatWave = EditorGUILayout.BeginToggleGroup("Repeat Wave", waveSetting.enableRepeatWave);
				if (waveSetting.enableRepeatWave) {
					waveSetting.repeatWavePauseTime = EditorGUILayout.Slider("Pause Before Repeat", waveSetting.repeatWavePauseTime, .1f, 20);
					waveSetting.maxRepeats = EditorGUILayout.IntSlider("Wave Repetitions", waveSetting.maxRepeats, 2, 100);
				}
				EditorGUILayout.EndToggleGroup();
			}
			
			// show randomizations
			var variantTag = "Randomization";
			
			waveSetting.enableRandomizations = EditorGUILayout.BeginToggleGroup(variantTag, waveSetting.enableRandomizations);
			if (waveSetting.enableRandomizations) {
				
				EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
	            EditorGUILayout.LabelField("Random Rotation");
				//GUILayout.FlexibleSpace();
				waveSetting.randomXRotation = GUILayout.Toggle(waveSetting.randomXRotation, "X");
				GUILayout.Space(10);
				waveSetting.randomYRotation = GUILayout.Toggle(waveSetting.randomYRotation, "Y");
				GUILayout.Space(10);
				waveSetting.randomZRotation = GUILayout.Toggle(waveSetting.randomZRotation, "Z");
	            EditorGUILayout.EndHorizontal();

				waveSetting.randomDistanceX = EditorGUILayout.Slider("Rand. Distance X", waveSetting.randomDistanceX, 0, 100);
				waveSetting.randomDistanceY = EditorGUILayout.Slider("Rand. Distance Y", waveSetting.randomDistanceY, 0, 100);
				waveSetting.randomDistanceZ = EditorGUILayout.Slider("Rand. Distance Z", waveSetting.randomDistanceZ, 0, 100);
			}
			EditorGUILayout.EndToggleGroup();
		
			
			// show increments
			var incTag = "Incremental Settings";
			waveSetting.enableIncrements = EditorGUILayout.BeginToggleGroup(incTag, waveSetting.enableIncrements);
			if (waveSetting.enableIncrements) {
				waveSetting.incrementPosX = EditorGUILayout.Slider("Distance X", waveSetting.incrementPosX, -100f, 100f);
				waveSetting.incrementPosY = EditorGUILayout.Slider("Distance Y", waveSetting.incrementPosY, -100f, 100f);
				waveSetting.incrementPosZ = EditorGUILayout.Slider("Distance Z", waveSetting.incrementPosZ, -100f, 100f);

				EditorGUILayout.Separator();
				
				if (waveSetting.enableRandomizations && waveSetting.randomXRotation) {
					DTInspectorUtility.ShowColorWarning("Rotation X - cannot be used with Random Rotation X.");
				} else {
					waveSetting.incrementRotationX = EditorGUILayout.Slider("Rotation X", waveSetting.incrementRotationX, -180f, 180f);
				}

				if (waveSetting.enableRandomizations && waveSetting.randomYRotation) {
					DTInspectorUtility.ShowColorWarning("Rotation Y - cannot be used with Random Rotation Y.");
				} else {
					waveSetting.incrementRotationY = EditorGUILayout.Slider("Rotation Y", waveSetting.incrementRotationY, -180f, 180f);
				}

				if (waveSetting.enableRandomizations && waveSetting.randomZRotation) {
					DTInspectorUtility.ShowColorWarning("Rotation Z - cannot be used with Random Rotation Z.");
				} else {
					waveSetting.incrementRotationZ = EditorGUILayout.Slider("Rotation Z", waveSetting.incrementRotationZ, -180f, 180f);
				}
			}
			EditorGUILayout.EndToggleGroup();

			
			// show increments
			incTag = "Post-spawn Nudge Settings";
			waveSetting.enablePostSpawnNudge = EditorGUILayout.BeginToggleGroup(incTag, waveSetting.enablePostSpawnNudge);
			if (waveSetting.enablePostSpawnNudge) {
				waveSetting.postSpawnNudgeForward = EditorGUILayout.Slider("Nudge Forward", waveSetting.postSpawnNudgeForward, -100f, 100f);
				waveSetting.postSpawnNudgeRight = EditorGUILayout.Slider("Nudge Right", waveSetting.postSpawnNudgeRight, -100f, 100f);
				waveSetting.postSpawnNudgeDown = EditorGUILayout.Slider("Nudge Down", waveSetting.postSpawnNudgeDown, -100f, 100f);
			}
			EditorGUILayout.EndToggleGroup();
		}
		
		return isDirty;
	}

	private static string[] PoolNames {
		get {
			return DTInspectorUtility.GetPrefabPoolNames();
		}
	}
}
